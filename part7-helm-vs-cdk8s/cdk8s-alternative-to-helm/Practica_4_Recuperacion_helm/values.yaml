ingress:
  # -- activate ingress for the application
  enabled: true
  # -- host for the ingress
  host: "cluster-ip"
  # -- type of service to publish the server app in case the ingress is not used.
  serviceType: NodePort

persistentVolumes:
  # -- whether PersistenceVolumes are created or assumed to be already created in the cluster
  create: true
  # -- whether PersistenceVolumes are created dynamically with a StorageClass
  enableStorageClass: true
  storageClasses:
    # -- storageClass name for MySQL
    mysql: mysql
    # -- storageClass name for MongoDB
    mongo: mongodb
    # -- storageClass name for RabbitMQ
    rabbit: rabbitmq

networkPolicies:
  # -- whether we apply NetworkPolicies or not
  enabled: false

services:
  mongodb:
    # -- Image to use for deploying MongoDB
    image: mongo
    # -- Tag to use for deploying MongoDB docker image
    tag: "4.2.3"
  mysql:
    # -- Image to use for deploying MySQL
    image: mysql
    # -- Tag to use for deploying MySQL docker image
    tag: "8"
    # -- MySQL user
    username: myuser
    # -- MySQL password
    password:
  rabbitmq:
    # -- Image to use for deploying RabbitMQ
    image: fjvela/urjc-fjvela-rabbitmq
    # -- Tag to use for deploying RabbitMQ docker image
    tag: "1.0.0"
  server:
    # -- Image to use for deploying Server application
    image: fjvela/urjc-fjvela-server
    # -- Tag to use for deploying Server application docker image
    tag: "1.0.5"
  worker:
    # -- Image to use for deploying Worker application
    image: torrespro/mca-worker
    # -- Tag to use for deploying Worker Service application docker image
    tag: "2.0.0"
  external:
    # -- Image to use for deploying External Service application
    image: fjvela/urjc-fjvela-external-service
    # -- Tag to use for deploying External Service application docker image
    tag: "1.0.1"
